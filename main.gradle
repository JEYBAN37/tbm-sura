subprojects {
    apply plugin: "java"
    apply plugin: "java-library"
    apply plugin: "jacoco"
    apply plugin: 'io.spring.dependency-management'

    sourceCompatibility = JavaVersion.VERSION_17

    repositories {
        mavenCentral()
        maven { url "https://repo.spring.io/snapshot" }
        maven { url "https://repo.spring.io/milestone" }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-webflux'
        implementation 'org.springframework.boot:spring-boot-starter-validation'
        implementation 'javax.persistence:javax.persistence-api:2.2'
        implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: '0.11.5'
        implementation 'mysql:mysql-connector-java:8.0.33'
        implementation 'org.mapstruct:mapstruct:1.5.2.Final'
        implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webflux-ui', version: '2.6.0'

        runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.11.5'
        runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.11.5'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'
        annotationProcessor 'org.mapstruct:mapstruct-processor:1.5.2.Final'
        annotationProcessor 'org.projectlombok:lombok-mapstruct-binding:0.2.0'

        testImplementation 'org.springframework.boot:spring-boot-starter-test'
        testImplementation 'io.projectreactor:reactor-test'
    }


    test {
        useJUnitPlatform()
    }

    jacoco {
        toolVersion = '0.8.8'
    }

    jacocoTestReport {
        dependsOn test
    }

    test.finalizedBy(project.tasks.jacocoTestReport)

    jacocoTestReport {
        dependsOn test
        reports {
            xml.required.set(true)
            xml.outputLocation.set(file("${buildDir}/reports/jacoco.xml"))
            csv.required.set(false)
            html.outputLocation.set(file("${buildDir}/reports/jacocoHtml"))
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}"
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "org.springframework:spring-framework-bom:${springFrameworkVersion}"
            mavenBom "io.projectreactor:reactor-bom:${reactorVersion}"
        }
    }
}